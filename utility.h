void backtrack(node *head,queue *fila,hash_table *ht)
{
    if (head->left != NULL && head->right != NULL)
    {
        enqueue(fila,'0');
        //print_queue(fila);
        backtrack(head->left,fila,ht);
        dequeue(fila);
        enqueue(fila,'1');
        backtrack(head->right,fila,ht);
        dequeue(fila);
    }
    else if (head->left == NULL && head->right == NULL)
    {
        //printf("%c ",head->item);
        //print_queue(fila);
        node *temp = fila->front;
        queue *nova = create_queue();
        //printf("aqui\n");
        while(temp != NULL)
        {
            enqueue(nova,temp->item);
           // printf("aqui\n");
            temp = temp->next;
        }
        put(ht,head->item,nova);
    }

    return ;
}

int count_tree(node *current)
{
        if(current == NULL) {
            return 0;
        } else {
            int sum = 1;
            return sum + count_tree(current->left) + count_tree(current->right);
        }
}

void print_byte_as_bits(unsigned char val) {
  for (int i = 7; 0 <= i; i--) {
    printf("%c", (val & (1 << i)) ? '1' : '0');
  }
  printf("\n");
}

void print_short_as_bits(unsigned short val)
{
    for (int i = 15; 0 <= i; i--)
    {
        printf("%c", (val & (1 << i)) ? '1' : '0');
    }
    printf("\n");
}

void set_bit(byte *new_byte,int position,FILE *file,hash_table *ht,FILE *new)
{
    unsigned char aux = 0;
    unsigned char aux2 = 0;
    int d = fgetc(file);
    if (d!= -1)
    {
        hn *temp = ht->table[d];
        node *temp2 = temp->fila->front;
        while(temp2 != NULL)
        {
            if (temp2->item == '1')
            {
                aux2 = 1 << new_byte->position;
                aux |= aux2;
                new_byte->position--;
            }
            else
            {
                new_byte->position--;
            }
            new_byte->item = new_byte->item | aux;
            if (new_byte->position < 0)
            {
                //print_byte_as_bits(new_byte->item);
                fprintf(new,"%c",new_byte->item);
                new_byte->position = 7;
                new_byte->item = 0;
                aux = 0;
                aux2 =0;
            }
            temp2 = temp2->next;
        }
    }
}

unsigned short is_bit_set(unsigned short in, unsigned short out)
{
    return (in & (1<<out));
}

unsigned short set_bit_m(unsigned short in ,unsigned short out)
{
    unsigned short mask  = (1 << out);
    return mask | in;
}

void setheader(unsigned short lixo,unsigned short size,FILE *compressed)
{
    int i,cont = 7;
    unsigned short headset = (lixo << 13) | size;
    unsigned char aux = 0;

    for (i = 15; i >= 0 ; --i)
    {
        if (is_bit_set(headset,i))
        {
            aux = set_bit_m(aux,cont);
        }
        cont--;
        if (cont < 0)
        {
            cont = 7;
            fputc(aux,compressed);
            aux = 0;
        }
    }
}

node *getnode(unsigned char item, FILE *compressed)
{
    node *new_node = (node*) malloc(sizeof(node));
    new_node->left = NULL;
    new_node->right = NULL;
    if (item == '\\')
    {
        unsigned char getnext = fgetc(compressed);
        new_node->item = getnext;
    }
    else if (item == '*')
    {
        new_node->item = item;
        unsigned char left = fgetc(compressed);
        new_node->left = getnode(left,compressed);
        unsigned char right = fgetc(compressed);
        new_node->right = getnode(right,compressed);
    }
    else
    {
        new_node->item = item;
    }
    return new_node;
}

node *maketree(FILE *compressed)
{
    node *tree = (node*) malloc(sizeof(node));
    tree = NULL;

    tree = getnode(fgetc(compressed),compressed);
}

int is_bit_set_dec(unsigned char c,int position)
{
    unsigned char mask = 1 << position;
    return mask & c;
}

int get_trash_size(unsigned char byte)
{
    return (int)  byte >> 5;
}

int get_tree_size(unsigned char byte1, unsigned char byte2)
{
    unsigned char aux = byte1 << 3;
    aux = aux | byte2;
    return (int) aux;
}

void compress()
{
    node *list = create_empty_node();
    pq *priority_queue = create_pq();
    node *bt = create_empty_node();
    queue *fila = create_queue();
    hash_table *ht = create_hash_table();
    unsigned char characterfirst;
    FILE *file = fopen("oi.txt","rb");
    while(1)
    {
        characterfirst = fgetc(file);
        if (feof(file))
        {
            break;
        }
        list = add(list,characterfirst);
    }
    node *temp = list;
    while(temp != NULL)
    {
        enqueue_pq(priority_queue,temp);
        temp = temp->next;
    }
    while(priority_queue->head->next!= NULL)
    {
        node *first = dequeue_pq(priority_queue);
        node *second = dequeue_pq(priority_queue);
        merge(bt,first,second,priority_queue);
    }
    backtrack(priority_queue->head,fila,ht);
    rewind(file);
    unsigned char item = 0;
    byte *new_byte = create_byte(item);
    int lixo;
    unsigned short size = count_tree(priority_queue->head);
    FILE *compressed = fopen("compressed.txt","wb");
    fprintf(compressed,"%c%c",0,0);
    print_tree_file(priority_queue->head,compressed);
    while(!feof(file))
    {
        set_bit(new_byte,new_byte->position,file,ht,compressed);
        if (feof(file))
        {
            fprintf(compressed,"%c",new_byte->item);
            lixo = new_byte->position + 1;
            fseek(compressed,0,SEEK_SET);
            setheader(lixo,size,compressed);
            break;
        }
    }
    fclose(compressed);
    fclose(file);
}

void decompress()
{
    byte *new_byte;
    FILE *compressed2 = fopen("compressed.txt","rb");
    FILE *decompressed = fopen("decompressed.txt","wb");
    unsigned char first_byte,second_byte,aux = 0;
    first_byte = fgetc(compressed2);
    second_byte = fgetc(compressed2);
    int trash_size = get_trash_size(first_byte);
    int tree_size = get_tree_size(first_byte,second_byte);
    node *tree = maketree(compressed2);
    node *temp = tree;
    int tree_position = ftell(compressed2);
    fseek(compressed2,0,SEEK_END);
    int difference = ftell(compressed2) - 1 ;
    fseek(compressed2,tree_position,SEEK_SET);
    new_byte = create_byte(fgetc(compressed2));
    while(!feof(compressed2))
    {
        if (temp->left == NULL && temp->right == NULL)
        {
            fputc(temp->item,decompressed);
            temp = tree;
        }
        if (is_bit_set_dec(new_byte->item,new_byte->position))
        {
            temp = temp->right;
            new_byte->position--;
            if (new_byte->position < 0)
            {
                new_byte->position = 7;
                //printf("%ld\n",ftell(compressed2));
                if (ftell(compressed2) == difference || feof(compressed2))
                {
                    break;
                }
                new_byte->item = fgetc(compressed2);
                //print_byte_as_bits(new_byte->item);
            }
        }
        else
        {
            temp = temp->left;
            new_byte->position--;
            if (new_byte->position < 0)
            {
                new_byte->position = 7;
                //printf("%ld\n",ftell(compressed2));
                if (ftell(compressed2) == difference || feof(compressed2))
                {
                    break;
                }
                new_byte->item = fgetc(compressed2);
                //print_byte_as_bits(new_byte->item);
            }
        }
    }

    new_byte = create_byte(fgetc(compressed2));
    while(new_byte->position >= trash_size-1 )
    {
        if (temp->left == NULL && temp->right == NULL)
        {
            fputc(temp->item,decompressed);
            temp = tree;
        }
        if (is_bit_set_dec(new_byte->item,new_byte->position))
        {
            temp = temp->right;
            new_byte->position--;
        }
        else
        {
            temp = temp->left;
            new_byte->position--;
        }
    }
    fclose(compressed2);
    fclose(decompressed);
}

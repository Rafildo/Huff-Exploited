#ifndef UTILITY.H
#define UTILITY.H

void backtrack(node *head,queue *fila)
{
	if (head->left != NULL && head->right != NULL)
	{
		enqueue(fila,'0');
		backtrack(head->left,fila,ht);
		dequeue(fila);
		enqueue(fila,'1');
		backtrack(head->right,fila,ht);
		dequeue(fila);
	}
	else if (head->left == NULL && head->right == NULL)
	{
		//printf("%c ",head->item);
		//print_queue(fila);
		node *temp = fila->front;
		queue *nova = create_queue();
		while(temp != NULL)
		{
			enqueue(nova,temp->item);
			temp = temp->next;
		}
		put(ht,head->item,nova);
	}
}

void set_bit(byte *new_byte,int position,FILE *file,hash_table *ht,FILE *new)
{
    unsigned char aux = 0;
    unsigned char aux2 = 0;
    int d = fgetc(file);
    if (d!= -1)
    {
        hn *temp = ht->table[d];
        node *temp2 = temp->fila->front;
        while(temp2 != NULL)
        {
            if (temp2->item == '1')
            {
                aux2 = 1 << new_byte->position;
                aux |= aux2;
                new_byte->position--;
            }
            else
            {
                new_byte->position--;
            }
            new_byte->item = new_byte->item | aux;
             if (new_byte->position < 0)
            {
                //print_byte_as_bits(new_byte->item);
                fprintf(new,"%d",new_byte->item);
                new_byte->position = 7;
                new_byte->item = 0;
                aux = 0;
                aux2 =0;
            }
            temp2 = temp2->next;
        }
    }
}
